# See also https://github.com/hvr/multi-ghc-travis for more information
# NB: don't set `language: haskell` here
language: c

# Cache the cabal sandbox and the apt-gotten packages
cache:
  directories:
    - $HOME/build/diku-kmc/kleenexlang/.cabal-sandbox
  apt: true
  

notifications:
  email:
      on_success: change
      on_failure: always

matrix:
  include:
    - env: CABALVER=1.22 GHCVER=7.10.1
      addons: 
        apt: 
          packages: [cabal-install-1.22, ghc-7.10.1]
          sources: [hvr-ghc]
    
  allow_failures:
   - env: CABALVER=head GHCVER=head

# Explicitly ask for the new container-based infrastructure.
sudo:
  false

# Note: the distinction between `before_install` and `install` is not
#       important.
before_install:
  - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$PATH
  - cabal sandbox init
  - cabal sandbox add-source regexps-syntax
  - cabal update
  - cabal get graphviz-2999.17.0.2
  - patch -p0 < graphviz-compat.patch
  - cabal sandbox add-source graphviz-2999.17.0.2

install:
  - cabal --version
  - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
  - travis_retry cabal update
  - cabal install --avoid-reinstalls --only-dependencies --enable-tests --enable-benchmarks

# Here starts the actual work to be performed for the package under
# test; any command which exits with a non-zero exit code causes the
# build to fail.
script:
  # -v2 provides useful information for debugging
  - cabal configure --enable-tests --enable-benchmarks -v2

  # this builds all libraries and executables
  # (including tests/benchmarks)
  - cabal build
  - cabal test
  - (cd test/test_compiled && make)
  #- cabal check

  # tests that a source-distribution can be generated
  - cabal sdist

  # check that the generated source-distribution can be built & installed
  # - SRC_TGZ=$(cabal info . | awk '{print $2;exit}').tar.gz &&
  # (cd dist && cabal install --force-reinstalls "$SRC_TGZ")

