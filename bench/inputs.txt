# Benchmark name    Semicolon-separated input data
patho2	            strings/ab_lines_len1000_50mb.txt;strings/ab_lines_len1000_70mb.txt;strings/ab_lines_len1000_100mb.txt;strings/ab_lines_len1000_150mb.txt;strings/ab_lines_len1000_170mb.txt;strings/ab_lines_len1000_200mb.txt;strings/ab_lines_len1000_250mb.txt;strings/ab_lines_len80_250mb.txt
flip_ab             strings/ab_lines_len1000_50mb.txt;strings/ab_lines_len1000_70mb.txt;strings/ab_lines_len1000_100mb.txt;strings/ab_lines_len1000_150mb.txt;strings/ab_lines_len1000_170mb.txt;strings/ab_lines_len1000_200mb.txt;strings/ab_lines_len1000_250mb.txt;strings/ab_lines_len80_250mb.txt
rot13               strings/random_50mb.txt;strings/random_70mb.txt;strings/random_100mb.txt;strings/random_150mb.txt;strings/random_170mb.txt;strings/random_200mb.txt;strings/random_250mb.txt

thousand_sep        numbers/numbers_250mb.txt
csv_project3        csv/csv_format1_250mb.csv
irc                 irc/irc_50mb.txt

apache_log          apache_log/example_big.log
ini2json            ini/inifile_25mb.ini
# syntax           No benchmarks
issuu_json2sql      issuu/issuu_1000000objs.json;issuu/issuu_14000000objs.json
drex_swap-bibtex    bibtex/bibtex_2mb.bib
drex_del-comments   comments/comments_2mb.txt
drex_extract-xml    xml/xml_2mb.xml

dfamail             email/emails_100mb.txt

iso_datetime_to_json datetime/datetimes_250mb.txt
# plus csv_project3 again but with different plot.


# simple_id           strings/ab_lines_len1000_250mb.txt;strings/ab_lines_len80_250mb.txt
# issuu_fallback	    issuu/issuu_1000000objs.json
# issuu_nofallback    issuu/issuu_1000000objs.json
# csv2json            csv/csv_format1_250mb.csv
# csv2json_nows	    csv/csv_format1_250mb.csv
# json2csv            csv/csv_format1_250mb.csv.csv.ws.json
# as                  strings/as_20mb.txt;strings/as_50mb.txt;strings/as_70mb.txt;strings/as_100mb.txt;strings/as_120mb.txt;as_150mb.txt;as_170mb.txt;as_200mb.txt
# email               email/emails_100mb.txt


# Measure the speed of reading and writing lines in C/C++.
# The test reads lines with fgets() and prints it using either
# /two/ calls to fputs(), adding a newline with the second call,
# or /one/ call to fprintf(), using the formatting to add the extra
# newline.  It is, maybe unsurprisingly, faster to do two fputs() than
# to do one fprintf().
# raw_io_speed        strings/ab_lines_len1000_250mb.txt
